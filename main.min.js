(function (factory) {
    typeof define === 'function' && define.amd ? define(factory) :
    factory();
}((function () { 'use strict';

    const simpleModule = (() => {

        console.log("simpleModule fires when imported");
        
        const functionOne = function() {
            console.log("here i am");
        };

        const functionTwo = function(anArg) {
            console.log('functionTwo ' + anArg);
            let adjusted = privateFunction(anArg);
            return adjusted;
        };

        const privateFunction = function(theArg) {
            return theArg + " - adjusted";
        };

        return {
            functionOne: functionOne,
            functionTwo: functionTwo
        };
    })();

    const aNumber = 1234;


    const noThis = {

        //Totally requires THIS... blarf.

        internalNumber: 6789,


        internalFunc: function() {
            return 3333;
        },

        init: function() {

            const internalNumber = 6633;

            console.log("noThis obj");
            console.log(aNumber + " - " + this.internalNumber);
            console.log(internalNumber);
            console.log(this.internalFunc());



            simpleModule.functionOne();
            let tester = simpleModule.functionTwo("Just some data");
            console.log("simpleModule output: " + tester);
            
        }
    };


    class primaryClass {
        constructor() {
          this._Initialize();
        }
      
        _Initialize() {
            console.log("INTITALIZING");
            console.log(aNumber);
        }
    }


    let _APP = null;


    window.addEventListener('DOMContentLoaded', () => {
        console.log("working as intended");
        _APP = new primaryClass(); //classes and this kind of suck?
        noThis.init();

    });

})));
